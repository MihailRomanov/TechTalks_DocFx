// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Wintellect.PowerCollections.Tests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Wintellect_PowerCollections_DuplicatePolicyAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("PowerCollections", "Wintellect.PowerCollections.DuplicatePolicy");
    
    internal Wintellect_PowerCollections_DuplicatePolicyAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor InsertFirst {
        get {
            object _ret_val = m_privateType.GetStaticField("InsertFirst");
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor(_ret_val);
            }
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor InsertLast {
        get {
            object _ret_val = m_privateType.GetStaticField("InsertLast");
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor(_ret_val);
            }
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor ReplaceFirst {
        get {
            object _ret_val = m_privateType.GetStaticField("ReplaceFirst");
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor(_ret_val);
            }
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor ReplaceLast {
        get {
            object _ret_val = m_privateType.GetStaticField("ReplaceLast");
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor(_ret_val);
            }
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor DoNothing {
        get {
            object _ret_val = m_privateType.GetStaticField("DoNothing");
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor(_ret_val);
            }
            global::Wintellect.PowerCollections.Tests.Wintellect_PowerCollections_DuplicatePolicyAccessor ret = _ret;
            return ret;
        }
    }
}
}
